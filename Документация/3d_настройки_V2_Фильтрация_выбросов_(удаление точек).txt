Фильтрация выбросов (удаление точек, сильно отклоняющихся от соседей):

Расчет нормалей к точкам - галочка
   	voxel_size (м)	0.001 - 0.01	0.002	Базовый размер вокселя 
VOXEL_SIZE = 0.01               # Размер вокселя для даунсемплинга (меньше = точнее, но медленнее)
    "radius_multiplier": (1.0, 5.0, 0.1),  # Слайдер: множитель к VOXEL_SIZE  normal_estimation_radius	1.0 - 5.0	2.0	Радиус поиска нормалей (× voxel_size)
    "max_neighbors": (10, 200),            # Слайдер для KNN outlier_removal_neighbors	20 - 100	40	Количество соседей для удаления выбросов
	outlier_removal_std_ratio	0.5 - 2.0	1.0	Стандартное отклонение для выбросов
----------------------------------------------------------------------------------------------------------
ICP (2 уровня):
ICP_METHOD = "point_to_point" или "point_to_plane"
THRESHOLD_METHOD = "auto", "manual" или "iterative"
MANUAL_THRESHOLD = 0.02         # Используется если THRESHOLD_METHOD = "manual"
	coarse_threshold_multiplier	2.0 - 6.0	4.0	Множитель для порога coarse ICP (× voxel_size)
fine_threshold_multiplier	1.0 - 3.0	1.5	Множитель для порога fine ICP (× voxel_size)
ICP_DISTANCE_MULTIPLIER = 0.4    # Коэффициент для ICP (0.3-0.5)

    "icp_settings": {
        "use_colored_icp": True,  # Использовать цветную ICP
        "max_iterations": (30, 200),  # Макс итераций ICP
        "convergence_criteria": {  # Критерии остановки
            "relative_fitness": (1e-6, 1e-4),
            "relative_rmse": (1e-6, 1e-4)
        }

---------------------------------------------------------------------------------------------------------
Глобальная регистрация:

GLOBAL_DISTANCE_MULTIPLIER = 1.5 # Коэффициент для глобальной регистрации (1.5-2.0)

- Даунсэмплинг (уменьшение плотности точек)
- Расчет нормалей для уменьшенного облака
- Вычисление FPFH-признаков (Fast Point Feature Histograms) - дескрипторы, описывающие локальную геометрию вокруг каждой точки
- RANSAC-регистрация на основе совпадения признаков:
	- Проверка соответствий по длине ребер, расстоянию и нормалям
	- Итеративный поиск наилучшего преобразования
- Если глобальная регистрация не удалась (fitness < 0.3), используется грубая инициализация по центрам облаков

    "global_registration": {
        "feature_radius_multiplier": (3.0, 8.0),  # Радиус для FPFH признаков (радиус для FPFH) - обычно 3-5× voxel_size
        "ransac_iterations": (100000, 5000000),  # Макс итераций RANSAC
        "correspondence_checkers": {  # Включение проверок соответствий
            "edge_length": True,
            "distance": True,
            "normal": True
        }
	confidence (0.9-0.999) - вероятность успеха RANSAC

Где используется воксели и даунсемплинг:

Глобальная регистрация:
"point_to_point" или "point_to_plane"
Многоуровневый подход: VOXEL_SIZE * 3, VOXEL_SIZE * 2, VOXEL_SIZE
Чем крупнее воксель, тем быстрее, но менее точно
многоуровневый подход (3 попытки с разными voxel sizes)
---------------------------------------------------------------------------------------------------------

Постобработка
??